- ordered reduction rules
- `or' in contract domains
- heuristic for finding cycles
- `where-not'
- `fresh' in metafunctions
- specify which reduction rules can participate in non-determinism
- or/and patterns
- syntax-parse style pattern match failure explanations
- automatic totality checker for contracted metafunctions
- LHS generation should respect the domain of the metafunction
- one term `where' clause should be interpreted as
  (where #t term)
- errors inside test cases shouldn't stop the program
  test--> should check that the expected values is in the range of the relation
- sexp -> sexp optional argument to traces to transform terms
  before printing.
- domain contract failures should additionally report
  which (sub)contract of the domain failed on which (sub)expression 
  of the input, eg:

#lang racket
(require redex/reduction-semantics)
(define-language L)
(define-metafunction L f : natural natural -> any)

(term (f 6 fred))
f: (f 6 fred) is not in my domain
***because fred is not a natural.***

- there should be better support for the intersection of two non-terminals
  (see FCV! production in lang.rkt)
- run FASTER!
