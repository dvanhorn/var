- ordered reduction rules
- `or' in contract domains
- heuristic for finding cycles
- `where-not'
- `fresh' in metafunctions
- specify which reduction rules can participate in non-determinism
- or/and patterns
- syntax-parse style pattern match failure explanations
- automatic totality checker for contracted metafunctions
- LHS generation should respect the domain of the metafunction
- one term `where' clause should be interpreted as
  (where #t term)
- errors inside test cases shouldn't stop the program
  test--> should check that the expected values is in the range of the relation
- sexp -> sexp optional argument to traces to transform terms
  before printing.
- domain contract failures should additionally report
  which (sub)contract of the domain failed on which (sub)expression 
  of the input, eg:

#lang racket
(require redex/reduction-semantics)
(define-language L)
(define-metafunction L f : natural natural -> any)

(term (f 6 fred))
f: (f 6 fred) is not in my domain
***because fred is not a natural.***

- there should be better support for the intersection of two non-terminals
  (see FCV! production in lang.rkt)
- something like set-minus for non-terminals
- add a #:title argument to traces to control the title of the window.
- check syntax arrows for define-extended-language
- mechanism for making whole reduction paths disappear
- define-meta-shortcut (or define-metavariable, ie define-metafunction, 
  but makes an "identifier" metafunction)
- test generation is strongly affected by production nesting;
  moving bases case up (redundantly) helps and could be automated.
- enforce ellipsis invariants stated in metafunction contracts, 
  e.g., f : any ..._1 -> any ..._1
- why does the #;equiv predicate get called in both directions?
- -->E tests should print what they did reduce to
- ,@ in (term)
- test--> R T1 T2 should check that T2 is in the domain of R.
- drop the restriction on union-reduction-relations to have
  the same language.  We want local extensions to the language
  and then union relations together at the top.
- a tool that compared metafunction domains to LHS patterns and
  told you about unreachable cases would be amazing, eg:
  f : string -> number
  [(f 7) blah]  ; not reachable

- run FASTER!
