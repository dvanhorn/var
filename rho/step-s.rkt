#lang racket
(require redex/reduction-semantics)
(require "lang.rkt" "meta.rkt" "util.rkt")
(provide s)
(test-suite test step-s)

(define (s Ms)
  (redex-let 
   λcρ ([STRUCTENV (term (struct-env ,Ms))])
   (reduction-relation
    λcρ #:domain (D σ)
    (--> ((@ (X_cons ^ LAB_use X_def) V ..._1 LAB) σ)
         ((-- (struct X_tag V ...)) σ)
         (where (any_0 ... (X_def any_2 ... (X_tag X_cons X_pred (X_acc ..._1)) any_3 ...) any_1 ...)
                STRUCTENV))    
    (--> ((@ (X_pred ^ LAB_use X_def) (-- (struct X_tag V_1 ...) C ...) LAB) σ)
         ((-- (clos any_result (env))) σ)
         (where (any_0 ... (X_def any_2 ... (X_tag X_cons X_pred* (X_acc ...)) any_3 ...) any_1 ...)
                STRUCTENV)
         ;; ensures f_pred is a predicate
         (where (any_0 ... (X_def any_2* ... (X_tag* X_cons* X_pred (X_acc* ...)) any_3* ...) any_1 ...)
                STRUCTENV)
         (where any_result ,(eq? (term X_tag) (term X_tag*))))    
    (--> ((@ (X_pred ^ LAB_use X_def) V LAB) σ)
         ((-- (clos #f (env))) σ)
         (side-condition (not (redex-match λcρ STRUCTV (term V))))
         (where (any_0 ... (X_def any_2 ... (X_tag X_cons X_pred (X_acc ...)) any_3 ...) any_1 ...)
                STRUCTENV))
    (--> ((@ (X_acc ^ LAB_use X_def) (-- (struct X_tag V_1 ...) C ...) LAB) σ)
         (V σ)
         (where (any_0 ... (X_def any_2 ... (X_tag X_cons X_pred (X_acc* ...)) any_3 ...) any_1 ...)
                STRUCTENV)         
         (where ((X_acc1 ..._1 X_acc X_acc2 ..._2)
                 (V_2 ..._1 V V_3 ..._2))
                ((X_acc* ...)
                 (V_1 ...)))))))

(test
 (define Ms
   (term [(module f racket (require) 
            (struct posn (x y))
            (struct pair (x y))
            (provide/contract [posn (pred (λ (x) #t) Λ)]))]))
 (test/σ--> (s Ms)
            (term (@ (posn ^ † f) (-- (clos 1 (env))) (-- (clos 2 (env))) †))
            (term (-- (struct posn (-- (clos 1 (env))) (-- (clos 2 (env)))))))
 (test/σ--> (s Ms)
            (term (@ (posn? ^ † f) (-- (struct posn (-- (clos 1 (env))) (-- (clos 2 (env))))) †))
            (term (-- (clos #t (env)))))
 (test/σ--> (s Ms)
            (term (@ (posn? ^ † f) (-- (struct pair (-- (clos 1 (env))) (-- (clos 2 (env))))) †))
            (term (-- (clos #f (env)))))
 (test/σ--> (s Ms)
            (term (@ (posn? ^ † f) (-- (clos 3 (env))) †))
            (term (-- (clos #f (env)))))
 (test/σ--> (s Ms)
            (term (@ (posn-x ^ † f) (-- (struct posn (-- (clos 1 (env))) (-- (clos 2 (env))))) †))
            (term (-- (clos 1 (env)))))
 (test/σ--> (s Ms)
            (term (@ (posn-y ^ † f) (-- (struct posn (-- (clos 1 (env))) (-- (clos 2 (env))))) †))
            (term (-- (clos 2 (env))))))

